# src/1-documentation/docs/7-PlanPhasedModuleExtraction.yaml
# (Or simply plan.yaml if preferred)

steps:
  - id: "phase1_extract_util_module"
    name: "Phase 1: Extract Util Module (kitchensink-util)"
    description: |
      **Goal:** Extract the `util` code (specifically `Resources.java` which provides CDI producers for EntityManager and Logger) 
      from the legacy `kitchensink` WAR module into a new, separate Java 21 JAR module named `kitchensink-util`. 
      This new module will be a plain JAR library. The legacy `kitchensink` module will then depend on this `kitchensink-util` module.

      **Key Activities:**
      1. Create the `kitchensink-util` module directory structure:
         `kitchensink-util/pom.xml`
         `kitchensink-util/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java`
      2. Populate `kitchensink-util/pom.xml` to:
         - Inherit from the parent aggregator POM.
         - Set artifactId to `kitchensink-util`, packaging to `jar`.
         - Set Java compiler source/target to 21.
         - Add `jakarta.enterprise:jakarta.enterprise.cdi-api`, `jakarta.persistence:jakarta.persistence-api`, 
           and `jakarta.validation:jakarta.validation-api` as `provided` dependencies.
      3. Copy `kitchensink/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java`
         to `kitchensink-util/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java`.
      4. Delete `kitchensink/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java` from the original module.
      5. Update `kitchensink/pom.xml` (legacy WAR module):
         - Ensure it inherits from the parent aggregator POM.
         - Add a dependency on `com.example.kitchensink:kitchensink-util`.
      6. Update the parent aggregator `pom.xml` (e.g., in `2phase [kitchensink-parent]` or `3phase` root) to include `<module>kitchensink-util</module>` 
         and `<module>kitchensink</module>`, ensuring `kitchensink-util` is listed first to build first.
      7. The `Resources.java` in `kitchensink-util` should be annotated with `@ApplicationScoped` and use `@Produces` for `EntityManager` 
         and `Logger` as per `1.md`.
    status: "todo"
    notes: "This is the first step in modularizing the legacy application."

  - id: "phase2_extract_business_module"
    name: "Phase 2: Extract Business Logic Module (kitchensink-business)"
    description: |
      **Goal:** Extract the business logic (JPA entities like `Member.java`, repositories like `MemberRepository.java`, 
      and services like `MemberRegistration.java`) from the legacy `kitchensink` module into a new Java 21 JAR module 
      named `kitchensink-business`. This module will be a plain JAR library using Spring Data JPA. 
      The legacy `kitchensink` module (if parts still exist) or new Spring Boot UI/API modules will depend on it.

      **Key Activities (referencing 4.md, 5.md, 6.md):**
      1. Create the `kitchensink-business` module directory structure:
         `kitchensink-business/pom.xml`
         `kitchensink-business/src/main/java/com/example/kitchensink/business/model/Member.java`
         `kitchensink-business/src/main/java/com/example/kitchensink/business/repo/MemberRepository.java`
         `kitchensink-business/src/main/java/com/example/kitchensink/business/service/MemberRegistration.java`
         `kitchensink-business/src/main/java/com/example/kitchensink/business/event/MemberRegisteredEvent.java`
         `kitchensink-business/src/main/resources/META-INF/beans.xml` (if needed for CDI in a library, or rely on Spring's component scan).
      2. Populate `kitchensink-business/pom.xml`:
         - Inherit from parent aggregator.
         - Set artifactId `kitchensink-business`, packaging `jar`.
         - Add `spring-boot-starter-data-jpa` dependency (this brings in Spring context, JPA API, Hibernate, etc.).
         - Potentially `jakarta.enterprise.cdi-api` if some classes still use it initially, though aim for Spring annotations.
      3. Migrate `Member.java` entity to `com.example.kitchensink.business.model.Member`. Ensure it has standard JavaBean getters/setters.
      4. Create Spring Data JPA `MemberRepository` interface in `com.example.kitchensink.business.repo.MemberRepository` extending `JpaRepository<Member, Long>`.
      5. Create `MemberRegisteredEvent` in `com.example.kitchensink.business.event`.
      6. Rewrite `MemberRegistration` service as a Spring `@Service` in `com.example.kitchensink.business.service.MemberRegistration`, 
         injecting `MemberRepository` and `ApplicationEventPublisher`. Use `@Transactional`.
      7. Original data/model/service classes should be moved from `kitchensink` module's `org.jboss.as.quickstarts.kitchensink.{data,model,service}` packages to their new locations in `kitchensink-business`.
      8. Delete the original data, model, and service Java files from the `kitchensink` module.
      9. Update parent aggregator `pom.xml` to include `<module>kitchensink-business</module>` (likely after `kitchensink-util`).
      10. If `kitchensink` module still exists and needs this business logic, add a dependency on `kitchensink-business` to `kitchensink/pom.xml`.
      11. **Persistence Configuration:** If `kitchensink-business` is to be used in a non-Spring Boot EE environment initially, ensure it has `src/main/resources/META-INF/persistence.xml`. 
          For pure Spring Boot usage by downstream modules, this can be omitted in favor of `application.properties` in the Boot apps.
          File `5.md` discusses removing `persistence.xml` and using `application.properties` in Boot apps, which is the target.
    status: "todo"
    notes: "This step focuses on creating a modern, Spring-based business core."

  - id: "phase3_convert_ui_and_api_to_springboot"
    name: "Phase 3: Convert UI & API to Spring Boot Modules (springboot-webui, springboot-api)"
    description: |
      **Goal:** Create two new Spring Boot application modules: `springboot-webui` for the user interface (migrating from JSF to Thymeleaf) 
      and `springboot-api` for REST services (migrating from JAX-RS to Spring MVC). These modules will depend on `kitchensink-util` 
      and `kitchensink-business`. The original `kitchensink` WAR module will be completely removed.

      **Key Activities (referencing 2.md, 3.md, 5.md, 6.md):**
      1. **Create `springboot-webui` Module:**
         - Directory structure for a Spring Boot app (e.g., `src/main/java/com/example/kitchensink/webui/WebUiApplication.java`, controllers, `src/main/resources/templates/`, `application.properties`).
         - `pom.xml`: Inherit parent, set packaging `jar` (for executable JAR), import Spring Boot BOM, add `spring-boot-maven-plugin`, 
           add starters like `spring-boot-starter-web`, `spring-boot-starter-thymeleaf`, `spring-boot-starter-data-jpa`.
           Add dependencies on `kitchensink-util` and `kitchensink-business`.
         - Create `WebUiApplication.java` with `@SpringBootApplication`. Set `scanBasePackages` to include 
           `com.example.kitchensink.business`, `org.jboss.as.quickstarts.kitchensink.util`, and `com.example.kitchensink.webui`.
         - Migrate `MemberController` (from legacy JSF/CDI model) to a Spring MVC `@Controller` in `com.example.kitchensink.webui.controller`, 
           injecting the Spring `MemberRegistration` service from `kitchensink-business`.
         - Create Thymeleaf templates (e.g., `members.html`) in `src/main/resources/templates/` to replace JSF views.
         - Configure `application.properties` for datasource (e.g., H2 in-memory as per `5.md`), JPA/Hibernate settings (`ddl-auto=create-drop`).

      2. **Create `springboot-api` Module (if distinct REST API services are needed):**
         - Similar structure to `springboot-webui` but focused on REST.
         - `pom.xml`: Starters like `spring-boot-starter-web`, `spring-boot-starter-data-jpa`. Dependencies on `kitchensink-util`, `kitchensink-business`.
         - `@SpringBootApplication` class with appropriate `scanBasePackages`.
         - Migrate JAX-RS services (e.g., `MemberResourceRESTService.java`) to Spring MVC `@RestController` classes in `com.example.kitchensink.rest`.
         - Configure `application.properties`.

      3. **Update Parent Aggregator POM:**
         - Add `<module>springboot-webui</module>` and `<module>springboot-api</module>`.
         - **Remove `<module>kitchensink</module>` entirely.**

      4. **Delete Legacy `kitchensink` Module:**
         - Physically delete the `kitchensink` module directory from the project structure.
    status: "todo"
    notes: "Final phase to create runnable Spring Boot applications and retire the legacy WAR."