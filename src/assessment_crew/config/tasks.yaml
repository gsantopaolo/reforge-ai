compatibility_task:
  description: >
    Analyze the codebase for Java 21 compatibility issues. 
    Use JDeps on the compiled classes to identify any dependencies on internal or removed JDK APIs.
    Also note any libraries or frameworks that may not be compatible with Java 21 or Spring Boot.
  expected_output: >
    A list of identified compatibility issues or warnings (with references to classes or libraries in the codebase), 
    and suggestions on how to address them for Java 21/Spring Boot.
  agent: compatibility_agent

static_analysis_task:
  description: >
    Run static code analysis on the entire codebase. 
    Use SonarQube or similar tools to detect code smells, bugs, and gather code quality metrics (complexity, duplication, etc.). 
    Summarize the major findings and provide the raw metrics.
  expected_output: >
    Summary of code quality issues (e.g., top code smells or critical bugs) and key metrics (lines of code, complexity, duplications, etc.).
  agent: static_analysis_agent

db_usage_task:
  description: >
    Inspect the codebase for any database access code. 
    Find all SQL queries (e.g., in JDBC calls or SQL strings) and list the database tables and operations used. 
    Identify usage of any ORM (like JPA/Hibernate) or direct JDBC connections.
  expected_output: >
    List of database tables accessed and example queries, indicating which parts of the code (classes/methods) issue these queries or use the database.
  agent: db_detection_agent

ast_analysis_task:
  description: >
    Parse the source code structure to find frameworks or patterns relevant to migration. 
    Check for use of Java EE APIs (like Servlets, JMS, etc.) or any outdated libraries that Spring Boot would replace. 
    Also identify any extremely large or complex classes that might need refactoring.
  expected_output: >
    Identification of any framework-specific code (e.g., Java EE or older Spring versions) and a list of noteworthy structural findings (e.g., very large classes or cycles).
  agent: ast_parsing_agent

documentation_task:
  description: >
    Using all the gathered analysis (compatibility findings, static analysis results, DB usage, and AST insights), 
    write a comprehensive migration assessment report. 
    The report should include sections for each analysis area and provide recommendations for migration to Spring Boot on Java 21.
  expected_output: >
    A detailed Markdown report (suitable for technical teams) covering compatibility issues, code quality, database usage, architecture findings, and recommendations.
  agent: documentation_agent

summary_task:
  description: >
    Prepare an executive summary based on the assessment report. 
    This summary should highlight the most critical points, major risks, and an outline of next steps for the migration, in a concise form.
  expected_output: >
    A short Markdown document (1-2 pages) that captures key findings and recommendations in layman terms for decision-makers.
  agent: summary_agent

metrics_task:
  description: >
    Calculate basic codebase metrics. 
    Count total lines of code, number of Java files, number of packages (or modules), and average cyclomatic complexity (if available from analysis). 
    Provide these metrics as part of the assessment data.
  expected_output: >
    JSON-formatted metrics of the codebase (e.g., {"total_loc": ..., "num_files": ..., "num_packages": ..., "average_complexity": ...}).
  agent: metrics_agent

prioritization_task:
  description: >
    Based on all analysis results, determine which parts of the application should be migrated first or with highest priority. 
    Consider complexity, risk, and impact. 
    Propose a prioritized list of migration tasks or application modules/components for modernization.
  expected_output: >
    An ordered list of suggested migration steps or focus areas, with justification for each (why it's high/medium/low priority).
  agent: prioritization_agent
