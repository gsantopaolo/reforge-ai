extract_file_metadata:
  description: >
    Open and parse each Java source file to extract metadata:
    package declarations, class/interface names, and module affiliations.  
    Build a file‐level index for downstream analysis.
  expected_output: >
    - File index MD (tree format): file path, package, classes, interfaces  
    - Summary of total counts and any parsing errors
  agent: codebase_analyst_agent

generate_system_architecture:
  description: >
    Create high-level system architecture diagrams in Mermaid (architecture-beta),
    showing module hierarchies, package groupings, and component interactions.
  expected_output: >
    - Mermaid architecture diagrams  
    - Narrative describing core components and interactions
  agent: documentation_agent

generate_module_docs:
  description: >
    For each prioritized module:
    - Enhance/auto-generate Javadoc  
    - Write high-level overviews  
    - Produce Mermaid class and sequence diagrams  
    - Document namespaces, packages, and technologies used
  expected_output: >
    - Module documentation set (Javadoc, Markdown)  
    - Mermaid diagrams for classes and flows  
    - Component & technology inventory spreadsheet
  agent: documentation_agent

component_technology_inventory:
  description: >
    Enumerate all components, libraries, frameworks, and runtimes.
    Research migration pathways to Spring Boot on Java 21 for each via web sources.
  expected_output: >
    - Technology Inventory document with:  
      • Current version & usage context  
      • Migration notes & best-practice references
  agent: codebase_analyst_agent

research_migration_best_practices:
  description: >
    Summarize web-sourced best practices for migrating:
    - Java EE / Red Hat JBoss EAP → Spring Boot on Java 21  
    - Legacy frameworks to modern equivalents (e.g., logging, persistence)
  expected_output: >
    - Migration Practices Report covering patterns (Strangler Fig, branch-by-abstraction)  
    - Tool recommendations (OpenRewrite, jdeps, Flyway/Liquibase)  
    - Case-study references
  agent: domain_expert_agent

impact_analysis_on_java21:
  description: >
    Map legacy namespaces, packages, and classes to Java 21 and Spring Boot equivalents;
    identify removed or changed constructs and assess migration risks.
  expected_output: >
    - Impact Analysis document with:  
      • Legacy → Java 21 mapping  
      • Legacy → Spring Boot
      • Risk register with severity levels  
      • Recommended migration patterns per component
  agent: migration_agent

plan_phased_module_extraction:
  description: >
    Identify the least-coupled module via coupling metrics;
    create a stepwise extraction plan to implement it in Java 21 and Spring Boot
    alongside legacy code in incremental steps.
    The plan is ment to be executed by an agentic AI with human interaction.
    When evaluating the best way to migrate the legacy app to Java 21 Spring Boot, also keep in consideration:
    1. Domain-driven module boundaries over purely “least-coupled” metrics 
    2. Spring Modulith intermediate step before microservices 
    3. Gateway/proxy routing for coexisting legacy and Spring Boot 
    4. Leverage OpenRewrite Spring Boot 3.2 recipes for build and config 
    5. Plan adoption of virtual threads in high-throughput components 
    6. Implementing the Strangler Fig and incremental migration principles
    For each of the points above serach the internet and do accurate consideration based on the specific
    use case you are evaluating.
  expected_output: >
    - Phased Extraction Plan (criteria, steps, deliverables)  
    - Dependency minimization strategies
    - List of all the component to migrate from the simplest, the less coupled
    - The plan is ment to be used by an agentic AI must be writen in great details
    but it shall contain a paragraph with the list of actions the AI shall perform, eg. 
    migration of the files (list the files) in a new module supporting Java 21
    - Another paragraph shall detail how to make coexists the lecacy and the updated module
    - Extraction plan in yaml format (inside the md document you will produce) similar to the following:
      - phases: id, description, output, suggested tools (KnowledgeBaseTool, DomainModelAnalyzerTool,
        CodeLoaderTool, ModulithGeneratorTool, GatewayConfiguratorTool, OpenRewriteTool, CompilerTool, 
        TestRunnerTool, DiagramGeneratorTool, DocumentationTool)
    - do not consider any CI/CD, source control or integration test, phases
  agent: migration_agent
  human_input: true

plan_migration_roadmap:
  description: >
    Review all the documentation produced so far. 
    If you are not able to review it let the user know.
    Prioritize refactoring tasks; group changes into phases
    (e.g., logging upgrade, date/time API migration);
    schedule phases within the project timeline and include
    human review checkpoints.
  expected_output: >
    - Migration Roadmap: phases, timelines, dependencies, risk mitigations
  agent: migration_agent
  human_input: true

final_handover_and_summary:
  description: >
    Consolidate all outputs into an executive stakeholder report:
    highlight completed phases, risk mitigations, performance improvements, and next steps.
  expected_output: >
    - Polished Modernization Summary Report  
    - Executive presentation slides (optional)
  agent: migration_agent








#execute_refactoring:
#  description: >
#    Apply automated code transformations in batches:
#    use OpenRewrite for mechanical changes and LLM for complex
#    API swaps, then commit diffs for review.
#  expected_output: >
#    A series of clean diffs ready for merge,
#    each passing initial compilation.
#  agent: refactoring_agent
##  tools:
##    - OpenRewriteTool
##    - CompilerTool
##    - TestRunnerTool

#validate_changes:
#  description: >
#    Run full test suite, static checks, and smoke tests
#    on each refactoring batch to catch regressions early.
#  expected_output: >
#    Test result reports and static analysis dashboards
#    confirming code health.
#  agent: testing_agent
#  tools:
#    - TestRunnerTool
#    - StaticAnalyzerTool

#update_docs_after_refactor:
#  description: >
#    Refresh all previously generated documentation to reflect
#    code changes, ensuring code and docs remain in sync.
#  expected_output: >
#    Updated knowledge base with accurate, up-to-date docs.
#  agent: documentation_agent
#  tools:
#    - KnowledgeBaseTool